read.genepop.file <- function(infile) {#
#
# need declare the local variables...#
# test if file exists...#
#
	data <- readLines(infile)					# read the data file (line by line)#
	data <- data[-1]							# remove the comments line#
	data <- data[!(data == "")]					# remove any blank line#
	lpop <- grep("pop",tolower(data))			# give the positions of "pop" items#
	nbrpop <- length(lpop)						# give the number of populations#
	nloci <- (min(lpop) - 1)					# give the number of loci#
	last <- length(data) + 1					# give the last line of the file#
	data <- data[-lpop]							# remove the "pop" items#
	data <- data[-c(1:nloci)]					# remove the list of loci in the header#
	n <- (c(lpop[-1],last) - lpop) - 1			# give the sample size of each population#
	o <- c(0,cumsum(n))							# give the cumulative sample sizes over all populations#
	m <- matrix(nrow = sum(n),ncol = (nloci + 1)) # this is the data matrix#
	cpt <- 0									# this will count the lines in the data matrix#
	for (i in 1:nbrpop) {						# loop over populations#
    	m[((o[i] + 1):o[i + 1]),] <- rep(i,n[i]) # give the sub-matrix of data for the jth population #
		for (j in 1:n[i]) {						# loop over individuals within populations#
			cpt <- cpt + 1						# increment the line count#
			genotypes <- unlist(strsplit(data[cpt],",")) # split a line into the two parts separated by a comma#
			genotypes <- genotypes[2]			# the genotypes are in the second part#
			genotypes <- unlist(strsplit(genotypes," ")) # transform the genotypes (encoded as strings) into a list#
			genotypes <- genotypes[!(genotypes == "")] # remove any blank element in that list#
			genotypes <- as.integer(genotypes)	# transform the genotypes into a vector of integers#
			m[cpt,2:(nloci + 1)] <- genotypes	# put the genotypes into the data matrix#
		}#
	}                                           # in the following, determine the format of the data (number of digits that encode genotypes)#
	genotypes <- unlist(strsplit(data[1],",")) 	# split a line into the two parts separated by a comma#
	genotypes <- genotypes[2]					# the genotypes are in the second part#
	genotypes <- unlist(strsplit(genotypes," ")) # transform the genotypes (encoded as strings) into a list#
	genotypes <- genotypes[!(genotypes == "")]	# remove any blank element in that list#
	ploidy <- length(strsplit(genotypes[1],"")[[1]])#
	if ((ploidy == 2) | (ploidy == 4)) {digits <- 100} else {#
		if ((ploidy == 3) | (ploidy == 6)) {digits <- 1000}#
	}#
	res$genotypes <- m#
	res$format <- digits#
	return(res)#
}
read.genepop.file("auto1")
getwd()
read.genepop.file("auto1")
truc$r <- 1
?assign
?list
pts <- list(x=cars[,1], y=cars[,2])
pts
read.genepop.file <- function(infile) {#
#
# need declare the local variables...#
# test if file exists...#
#
	data <- readLines(infile)					# read the data file (line by line)#
	data <- data[-1]							# remove the comments line#
	data <- data[!(data == "")]					# remove any blank line#
	lpop <- grep("pop",tolower(data))			# give the positions of "pop" items#
	nbrpop <- length(lpop)						# give the number of populations#
	nloci <- (min(lpop) - 1)					# give the number of loci#
	last <- length(data) + 1					# give the last line of the file#
	data <- data[-lpop]							# remove the "pop" items#
	data <- data[-c(1:nloci)]					# remove the list of loci in the header#
	n <- (c(lpop[-1],last) - lpop) - 1			# give the sample size of each population#
	o <- c(0,cumsum(n))							# give the cumulative sample sizes over all populations#
	m <- matrix(nrow = sum(n),ncol = (nloci + 1)) # this is the data matrix#
	cpt <- 0									# this will count the lines in the data matrix#
	for (i in 1:nbrpop) {						# loop over populations#
    	m[((o[i] + 1):o[i + 1]),] <- rep(i,n[i]) # give the sub-matrix of data for the jth population #
		for (j in 1:n[i]) {						# loop over individuals within populations#
			cpt <- cpt + 1						# increment the line count#
			genotypes <- unlist(strsplit(data[cpt],",")) # split a line into the two parts separated by a comma#
			genotypes <- genotypes[2]			# the genotypes are in the second part#
			genotypes <- unlist(strsplit(genotypes," ")) # transform the genotypes (encoded as strings) into a list#
			genotypes <- genotypes[!(genotypes == "")] # remove any blank element in that list#
			genotypes <- as.integer(genotypes)	# transform the genotypes into a vector of integers#
			m[cpt,2:(nloci + 1)] <- genotypes	# put the genotypes into the data matrix#
		}#
	}                                           # in the following, determine the format of the data (number of digits that encode genotypes)#
	genotypes <- unlist(strsplit(data[1],",")) 	# split a line into the two parts separated by a comma#
	genotypes <- genotypes[2]					# the genotypes are in the second part#
	genotypes <- unlist(strsplit(genotypes," ")) # transform the genotypes (encoded as strings) into a list#
	genotypes <- genotypes[!(genotypes == "")]	# remove any blank element in that list#
	ploidy <- length(strsplit(genotypes[1],"")[[1]])#
	if ((ploidy == 2) | (ploidy == 4)) {digits <- 100} else {#
		if ((ploidy == 3) | (ploidy == 6)) {digits <- 1000}#
	}#
	res <- list(genotypes,format)#
	res$genotypes <- m#
	res$format <- digits#
	return(res)#
}
read.genepop.file("auto1")
data <- read.genepop.file("auto1")
dim(data$genotypes)
	pop <- unique(data$genotypes[,1])#
	nbrpop <- length(pop)#
	nloci <- length(data$genotypes[1,]) - 1
nbrpop
nloci
i <- 1
		genotypes <- data$genotypes[,(i+1)]#
		all1 <- floor(genotypes / data$format)#
		all2 <- genotypes - (all1 * data$format)#
		genes <- c(all1,all2)#
		alleles <- unique(genes)
alleles
		alleles <- alleles[alleles > 0]#
		ntotalleles <- (length(alleles))
ntotalleles
		nalleles <- vector("numeric",ntotalleles)
genes
lenght(genes)
length(genes)
dim(data)
dim(data$genotypes)
length(all1)
length(all2)
nalleles
?function
()
f<
.
	data <- read.genepop.file(infile)
infile <- "auto1"
	data <- read.genepop.file(infile)
	write.fdist.file(data,outfile)
write.fdist.file <- function(data,outfile)#
#
# need declare the local variables...#
#
	pop <- unique(data$genotypes[,1])#
	nbrpop <- length(pop)#
	nloci <- length(data$genotypes[1,]) - 1#
	write(0, file = outfile)#
	write(nbrpop, file = outfile,append = TRUE)#
	write(nloci, file = outfile,append = TRUE)#
	for (i in 1: nloci) {#
		genotypes <- data$genotypes[,(i+1)]#
		all1 <- floor(genotypes / data$format)#
		all2 <- genotypes - (all1 * data$format)#
		genes <- c(all1,all2)#
		alleles <- unique(genes)#
		alleles <- alleles[alleles > 0]#
		ntotalleles <- (length(alleles))#
		write("", file = outfile,append = TRUE)#
		write(ntotalleles, file = outfile,append = TRUE)#
		allelescounts <- vector("numeric",ntotalleles)#
		for (j in 1:nbrpop) {#
#			tmp <- data$genotypes[,(i+1)]#
#			all1 <- floor(tmp / data$format)#
#			all2 <- tmp - (all1 * data$format)#
#			tmp <- c(all1,all2)#
#			tmp <- tmp[tmp != 0]  #
			tmp <- genes[data$genotypes[,1] == pop[j]]#
			for (k in 1:ntotalleles) {#
				allelescounts[k] <- length(tmp[tmp == alleles[k]])#
			}#
			write(nalleles, file = outfile,ncolumns = length(nalleles),append = TRUE)#
		}#
	}#
}
#
write.fdist.file <- function(data,outfile) {#
#
# need declare the local variables...#
#
	pop <- unique(data$genotypes[,1])#
	nbrpop <- length(pop)#
	nloci <- length(data$genotypes[1,]) - 1#
	write(0, file = outfile)#
	write(nbrpop, file = outfile,append = TRUE)#
	write(nloci, file = outfile,append = TRUE)#
	for (i in 1: nloci) {#
		genotypes <- data$genotypes[,(i+1)]#
		all1 <- floor(genotypes / data$format)#
		all2 <- genotypes - (all1 * data$format)#
		genes <- c(all1,all2)#
		alleles <- unique(genes)#
		alleles <- alleles[alleles > 0]#
		ntotalleles <- (length(alleles))#
		write("", file = outfile,append = TRUE)#
		write(ntotalleles, file = outfile,append = TRUE)#
		allelescounts <- vector("numeric",ntotalleles)#
		for (j in 1:nbrpop) {#
#			tmp <- data$genotypes[,(i+1)]#
#			all1 <- floor(tmp / data$format)#
#			all2 <- tmp - (all1 * data$format)#
#			tmp <- c(all1,all2)#
#			tmp <- tmp[tmp != 0]  #
			tmp <- genes[data$genotypes[,1] == pop[j]]#
			for (k in 1:ntotalleles) {#
				allelescounts[k] <- length(tmp[tmp == alleles[k]])#
			}#
			write(nalleles, file = outfile,ncolumns = length(nalleles),append = TRUE)#
		}#
	}#
}
	write.fdist.file(data,outfile)
	write.fdist.file(data,"truc")
i
		genotypes <- data$genotypes[,(i+1)]#
		all1 <- floor(genotypes / data$format)#
		all2 <- genotypes - (all1 * data$format)#
		genes <- c(all1,all2)#
		alleles <- unique(genes)#
		alleles <- alleles[alleles > 0]#
		ntotalleles <- (length(alleles))
ntotalleles
all1
all2
nbrpop
j <- 1
pop
			tmp <- genes[data$genotypes[,1] == pop[j]]
tmp
alleles
			for (k in 1:ntotalleles) {#
				allelescounts[k] <- length(tmp[tmp == alleles[k]])#
			}
		allelescounts <- vector("numeric",ntotalleles)
			for (k in 1:ntotalleles) {#
				allelescounts[k] <- length(tmp[tmp == alleles[k]])#
			}
allelescount
allelescounts
?file.exists
read.genepop.file <- function(infile) {#
	if(!file.exists(infile)) {#
		stop(paste("The file ", infile," does not exist. Check the input file name...",sep = ""))#
	}#
	data <- readLines(infile)					# read the data file (line by line)#
	data <- data[-1]							# remove the comments line#
	data <- data[!(data == "")]					# remove any blank line#
	lpop <- grep("pop",tolower(data))			# give the positions of "pop" items#
	nbrpop <- length(lpop)						# give the number of populations#
	nloci <- (min(lpop) - 1)					# give the number of loci#
	last <- length(data) + 1					# give the last line of the file#
	data <- data[-lpop]							# remove the "pop" items#
	data <- data[-c(1:nloci)]					# remove the list of loci in the header#
	n <- (c(lpop[-1],last) - lpop) - 1			# give the sample size of each population#
	o <- c(0,cumsum(n))							# give the cumulative sample sizes over all populations#
	m <- matrix(nrow = sum(n),ncol = (nloci + 1)) # this is the data matrix#
	cpt <- 0									# this will count the lines in the data matrix#
	for (i in 1:nbrpop) {						# loop over populations#
    	m[((o[i] + 1):o[i + 1]),] <- rep(i,n[i]) # give the sub-matrix of data for the jth population #
		for (j in 1:n[i]) {						# loop over individuals within populations#
			cpt <- cpt + 1						# increment the line count#
			genotypes <- unlist(strsplit(data[cpt],",")) # split a line into the two parts separated by a comma#
			genotypes <- genotypes[2]			# the genotypes are in the second part#
			genotypes <- unlist(strsplit(genotypes," ")) # transform the genotypes (encoded as strings) into a list#
			genotypes <- genotypes[!(genotypes == "")] # remove any blank element in that list#
			genotypes <- as.integer(genotypes)	# transform the genotypes into a vector of integers#
			m[cpt,2:(nloci + 1)] <- genotypes	# put the genotypes into the data matrix#
		}#
	}                                           # in the following, determine the format of the data (number of digits that encode genotypes)#
	genotypes <- unlist(strsplit(data[1],",")) 	# split a line into the two parts separated by a comma#
	genotypes <- genotypes[2]					# the genotypes are in the second part#
	genotypes <- unlist(strsplit(genotypes," ")) # transform the genotypes (encoded as strings) into a list#
	genotypes <- genotypes[!(genotypes == "")]	# remove any blank element in that list#
	ploidy <- length(strsplit(genotypes[1],"")[[1]])#
	if ((ploidy == 2) | (ploidy == 4)) {digits <- 100} else {#
		if ((ploidy == 3) | (ploidy == 6)) {digits <- 1000}#
	}#
	res <- list(genotypes,format)#
	res$genotypes <- m#
	res$format <- digits#
	return(res)#
}
read.genepop.file("toto")
paste("The file \"", infile,"\" does not exist. Check the input file name...",sep = "")
write.fdist.file <- function(data,outfile = "data.dat") {#
	pop <- unique(data$genotypes[,1])#
	nbrpop <- length(pop)#
	nloci <- length(data$genotypes[1,]) - 1#
	write(0, file = outfile)#
	write(nbrpop, file = outfile,append = TRUE)#
	write(nloci, file = outfile,append = TRUE)#
	for (i in 1: nloci) {#
		genotypes <- data$genotypes[,(i+1)]#
		all1 <- floor(genotypes / data$format)#
		all2 <- genotypes - (all1 * data$format)#
		genes <- c(all1,all2)#
		alleles <- unique(genes)#
		alleles <- alleles[alleles > 0]#
		ntotalleles <- (length(alleles))#
		write("", file = outfile,append = TRUE)#
		write(ntotalleles, file = outfile,append = TRUE)#
		allelescounts <- vector("numeric",ntotalleles)#
		for (j in 1:nbrpop) {#
			tmp <- genes[data$genotypes[,1] == pop[j]]#
			for (k in 1:ntotalleles) {#
				allelescounts[k] <- length(tmp[tmp == alleles[k]])#
			}#
			write(allelescounts, file = outfile,ncolumns = length(nalleles),append = TRUE)#
		}#
	}#
}
genepop.to.fdist <- function(infile,outfile) {#
	data <- read.genepop.file(infile)#
	write.fdist.file(data,outfile)#
}
genepop.to.fdist("auto1")
data <- read.genepop.file("auto1")
write.fdist.file <- function(data,outfile) {#
	pop <- unique(data$genotypes[,1])#
	nbrpop <- length(pop)#
	nloci <- length(data$genotypes[1,]) - 1#
	write(0, file = outfile)#
	write(nbrpop, file = outfile,append = TRUE)#
	write(nloci, file = outfile,append = TRUE)#
	for (i in 1: nloci) {#
		genotypes <- data$genotypes[,(i+1)]#
		all1 <- floor(genotypes / data$format)#
		all2 <- genotypes - (all1 * data$format)#
		genes <- c(all1,all2)#
		alleles <- unique(genes)#
		alleles <- alleles[alleles > 0]#
		ntotalleles <- (length(alleles))#
		write("", file = outfile,append = TRUE)#
		write(ntotalleles, file = outfile,append = TRUE)#
		allelescounts <- vector("numeric",ntotalleles)#
		for (j in 1:nbrpop) {#
			tmp <- genes[data$genotypes[,1] == pop[j]]#
			for (k in 1:ntotalleles) {#
				allelescounts[k] <- length(tmp[tmp == alleles[k]])#
			}#
			write(allelescounts, file = outfile,ncolumns = length(nalleles),append = TRUE)#
		}#
	}#
}#
#
genepop.to.fdist <- function(infile,outfile = "data.dat") {#
	data <- read.genepop.file(infile)#
	write.fdist.file(data,outfile)#
}
genepop.to.fdist("auto1")
genepop.to.fdist("auto1","truc")
?file.copy
	dir.create("temp")
infile
	file.copy(infile,"temp")
a
length(a)
scan(a)
if.exist(a)
if.exists(a)
exists(a)
?file.exist
?file.exists
exists(a)
is.na(a)
?is
?scan
repeat {i <- 2; if(i ==2)break }
repeat {i <- 3; if(i ==2)break }
FALSE == 0
FALSE == 1
